apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

/**
 * Este é o bloco de configuração para personalizar seu aplicativo Android React Native.
 * Por padrão, você não precisa aplicar nenhuma configuração, apenas descomente as linhas necessárias.
 */
react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    enableBundleCompression = (findProperty('android.enableBundleCompression') ?: false).toBoolean()
    // Use o Expo CLI para agrupar o aplicativo, isso garante a configuração do Metro
    // funciona corretamente com projetos Expo.
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"
    /* Pastas */
    // A raiz do seu projeto, ou seja, onde reside o arquivo "package.json". O padrão é '../..'
    // root = file("../../")
    // A pasta onde está o pacote NPM do React Native. O padrão é ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    // A pasta onde está o pacote do Codegen do React-native. O padrão é ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    /* Variantes */
    // A lista de variantes que são depuráveis. Para essas, vamos
    // pula a agregação do pacote JS e dos recursos. Por padrão, é apenas "debug".
    // Se você adicionar sabores como lite, prod, etc., você terá que listar seus debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]
    /* Agrupamento */
    // Uma lista contendo o comando node e seus sinalizadores. O padrão é apenas 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    // Caminho para o arquivo de configuração da CLI. O padrão é vazio.
    // bundleConfig = file(../rn-cli.config.js)
    //
    // The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    // The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    // A list of extra flags to pass to the 'bundle' commands.
    // See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []
    /* Hermes Commands */
    // O comando do compilador hermes a ser executado. Por padrão, é 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    // A lista de sinalizadores a serem passados ao compilador Hermes. Por padrão, é "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()

/**
 * O tipo de construção preferido do JavaScriptCore (JSC)
 *
 * Por exemplo, para usar a variante internacional, você pode usar:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * A variante internacional inclui a biblioteca ICU i18n e os dados necessários
 * permitindo usar, por exemplo, `Date.toLocaleString` e `String.localeCompare` que
 * fornece resultados corretos ao usar com localidades diferentes de en-US. Observe que
 * esta variante é cerca de 6 MiB maior por arquitetura do que o padrão.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion
    namespace 'com.erasmo.foliodoc'

    defaultConfig {
        applicationId 'com.erasmo.foliodoc'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Atenção! Em produção, você precisa gerar seu próprio arquivo de keystore.
            // veja https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
        // Adicione este bloco para resolver conflitos de recursos
        resources {
            pickFirst 'META-INF/DEPENDENCIES'
            pickFirst 'META-INF/LICENSE'
            pickFirst 'META-INF/NOTICE'
            pickFirst 'META-INF/LICENSE.txt'
            pickFirst 'META-INF/NOTICE.txt'
        }
    }
    aaptOptions {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
}

// Aplique valores estáticos de `gradle.properties` para `android.packagingOptions`
// Valores permitidos em listas delimitadas por vírgulas, exemplo:
// android.packagingOptions.pickFirsts=/LICENÇA,**/picasa.ini
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    // Opção de divisão: 'foo,bar' -> ['foo', 'bar']
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
    // Aparar todos os elementos no lugar.
    for (i in 0..<options.size()) options[i] = options[i].trim();
    // `[] - ""` é essencialmente `[""].filter(Boolean)` removendo todas as strings vazias.
    options -= ""
    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        // Exemplo: android.packagingOptions.pickFirsts += '**/SCCS/**'
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    // A versão do react-native é definida pelo plugin Gradle do React Native
    implementation("com.facebook.react:react-android")

    // Adiciona as dependências do Apache PDFBox AQUI
    implementation 'org.apache.pdfbox:pdfbox:2.0.29'
    implementation 'org.apache.pdfbox:fontbox:2.0.29'
    // implementation 'org.apache.pdfbox:pdfbox-tools:2.0.29' // Opcional, descomente se precisar

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    if (isGifEnabled) {
        // Para suporte a gif animado
        implementation("com.facebook.fresco:animated-gif:${expoLibs.versions.fresco.get()}")
    }
    if (isWebpEnabled) {
        // Para suporte webp
        implementation("com.facebook.fresco:webpsupport:${expoLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            // Suporte webp animado
            implementation("com.facebook.fresco:animated-webp:${expoLibs.versions.fresco.get()}")
        }
    }
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}
